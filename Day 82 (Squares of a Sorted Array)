Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

CODE :

class Solution {
    public int[] sortedSquares(int[] nums) {
        int sort[] = new int[nums.length];
        int j=0;
        for(int i : nums){
            sort[j++]=i*i;
        }
        Arrays.sort(sort);
        return sort;
    }
}

class Solution {
    public int[] sortedSquares(int[] nums) {
        int sort[] = new int[nums.length];
        int j=0;
        for(int i : nums){
            sort[j++]=i*i;
        }
        for(int i=0;i<sort.length;i++){
            for(j=0;j<sort.length-i-1;j++){
                if(sort[j]>sort[j+1]){
                    int temp=sort[j];
                    sort[j]=sort[j+1];
                    sort[j+1]=temp;
                }
            }
        }
        return sort;
    }
}
